MANIPULATING FILES AND DIRECTORIES

Wildcards 
	Because the shell uses filename so much, it provides special characters to help you rapidly specify groups of filenames. These special characters are called wildcards. Using wildcards(also know as globbing) allows you to select filenames based on pattern of characters.

	WILDCARDS
	*				|	Any characters
	?				|	Any single characters
	[characters]	|	Any characters that is a member of the set characters
	[!characters]	|	Any characters that is not a member of the set characters
	[[:class:]]		|	Any characters that is a member of the  specified class

	Commonly used character classes
	[:alum:]	|	Any alphanumeric character
	[:alpha:]	|	Any alphabetic character
	[:digit:]	|	Any numeral
	[:lower:]	|	Any lowercase letter
	[:upper:]	|	Any uppercase letter

	Wildcards example
	*				|	All files
	*g 				|	Any file beginning with g
	b*.txt			|	Any file beginning with b followed by any characters and ending with .txt
	Data???			|	Any file beginning with Data followed by exactly tree characters
	[abc]*			|	Any file beginning with either a,b or c
	BACKUP.[0-9][0-9][0-9] |	Any file beginning with BACKUP followed by exactly tree numerals
	[[:super:]]* 	|	Any file beginning with an uppercase letter
	[![:digit:]]*	|	Any file not beginning with a numeral
	*[[:lower:]123]	|	Any file ending with a lowercase letter on the numerals 1,2 or 3.



mkdir command :

This command is used to create directories. It works like this :
	mkdir directory...

You can create multiple directoies like this :
	mkdir demo1 demo2 demo3
would create 3 directoies named demo1 demo2 demo3.

cp command :

The cp command copies files or directoies. It can be used two different ways :
	cp item1 item2
to copy the single file or directory item1 to file or directory item2 and :
	cp item... directory
to copy multiple items (either files or directories) into a directory.

	cp options

	-a, --archive						|	Copy the file and directories and all of their altributes,
										|	including ownerships and permission. Normally, copies take all the 		 |	 default altributes of the user performing the copy.
	-i, --interactive 					|	Before overwriting an existing file, prompt the user for confirmation. 										|	If this option is not specified, cp will silently overwrite files.
	-r, --recursive						|	Recursively copy directories and their contents. This option (or the -a 									|	option) is requied when copy directories.
	-u, --update						|	When copying files from one directory to another, copy only files that 										|	either don't exist or are newer than the existing corresponding files in 									 |	 the destination directory.
	-v, --verbose						|	Display informative messages as the copy performed

	
	cp example

	cp file1 file2 				|	Copy file1 to file2. If file2 exists, it is overwritten with the contents of								|	file1. If file2 doesn't exist, it is created.
	cp -i file1 file2			|	Same as above, except that if file2 exists, the user is prompted before it is 								|	overwritten.
	cp file1 file12 dir1 		|	Copy file1 and file2 into the directory dir1, dir1 must already exist.
	cp dir1/* dir2 				|	Using a wildcard, all the file in dir1 are copied into dir2. dir2 must be exist.
	cp -r dir1 dir2 			|	Copy dictionary dir1 (and its contents) to directory dir2. If directory dir2 								|	doesn't exist, it is created and will contain the same contents as directory dir1

mv command :
	The mv command performs both file moving and file renaming, depending on how it is used. In either case, the original filename no longer exists after the operation mv is used in much the same way as cp :
		mv item1 item2
	to move or rename file or directory item1 to item2 or :
		mv item... directory
	to move one or more item from one directory to another. mv shares many of the same options as cp :

	mv Options

	-i, --interactive 			|	Before overwritting an existing file, prompt the user for confimation. If this 								|	option is not specified, mv will silently overwrite files.
	-u, --update 				|	When moving files from one directory to another, move only file that either 								|	don't exist in the destination directory or are newer than the existing 									|	corresponding files in the destination directory.
	-v, --verbose 				|	Display informative messages as the move is performed.



rm command :
	The rm command is used to remove (delete) files and directories like this :
		rm file...
	where the item is the name of one or more files or directories.


	rm options

	-i, --interactive 	 |	Before deleting an existing file, prompt the user for confirmation. If this option is 						 |	not specified, rm will silently delete files.
	-r, --recursive 	 |	Recursively delete directories. This means that if a directory being deleted has							 |	subdirectories, delete them too. To delete a directory, this option must be specified.
	-f, --force 		 |	Ignore nonexistent files and do not prompt. This overrides the --interactive option.
	-v, --verbose 		 |	Display informative messages as the deletion is performed.

	
	rm example 

	rm -r file1 dir1	|	Delete file1 and dir1 and its contents.
	rm -rf file1 dir1 	|	Same as above, except that if  either file1 or dir1 doesn't exist, rm will continue 
						|	silently

ln command :

	The ln command is used to create either hard or symbolic links. It is used in one of two ways :
		ln file link
	to create a hard link and 
		ln -s item link
	to create a symbolic link where item is either a file or a directory.


Hard Links
	Hard links are the original Unix way of creating links; symbolic links are more modern. By default, every file has a single hard link that gives the file its name. When we create a hard link, we create an additional directory entry for a file. Hard links have two important limiations :
		+ A hard link can't reference a file outside its own filesystem. This means a link can't reference a file that is not the same disk partition as the link itself.
		+ A hard link can't reference a directory.
	A hard link is indistinguishable from the file itself. Unlike a directory list containing a symbolic link, a directory list containinga hard link shows no special indication of the link. When a hard link is deleted, the link is removed, but the contents of the file itself continue to exist (that is, its space isn't deallocated ) until  all links to the  file are deleted.
	Its important to be aware of hard links because you might encounter them from time to time, but modern practice prefers symbolic links, which we wil cover next.
Symbolic
	Symbolic links were created to overcome the limiations of hard links. Symbolic links work by creating a special type of file that contains a text pointer to the reference file or directory. In this regard they operate in much the same way as a Windos shortcut, through of course they predate the windows feature by many years
	A file pointed to by a symbolic link and the symbolic link itself are largely indistinguishable from one another. For example, if you write somethingto the symbolic lin, the referenced file is also written to. However, when you delete a symbolic link, only the link is deleted, not the file itself. If the file deleted before the symbolic link, the link will continue to exist but wil point to nothing. In this case, the link is said to be broken. In many implementations, the ls command will display broken links in a distinguishing color, such as red, to reveal their presence.
	